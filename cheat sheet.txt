db == database

to view databases that already exist on your local machine:

  show dbs

collection == collection of documents; use name of collection you're
querying. Any time a collection is referenced that doesn't exist, it will be
created.

generic == db.collection.method()

To view all collections in your current database:

  show collections

If your database is books and your collection is george_orwell, you would do:
  
  use books
  db.orwell.method

To read a document, simply do:

  db.collection.find() // Returns all documents in a collection,
  // unless parameters are specified. Will return all documents matching the
  // parameters specified.
  
  Parameters look like JSON, for instance, if we want to return all books in
  the orwell collection, we would do:

    db.orwell.find()

  If we wanted to find only Animal Farm, it would look like:

    db.orwell.find({"title": "Animal Farm"})

  You may do this with any combination of parameters in JSON-style format. For
  instance, if there were two books named Animal Farm written by George Orwell
  (there aren't, just for the sake of illustration), we could narrow it down
  to one written in 1945:

    db.orwell.find({
        "title": "Animal Farm",
        "year": 1945
    })

  Notice that numbers are represented without quotes, just like in JSON. This
  of course applies to booleans as well. So, if we wanted to find all books
  written by Orwell that we already read, we could do:

    db.orwell.find({"read": true})

  We could also pass a second argument to the find method, called a
  projection. A projection is quite simply the fields we're interested in
  returning.

  Again with Animal Farm, if we only want to return the year, it would look
  like this:

    db.orwell.find({
        "title": "Animal Farm"
    }, {
      "year": 1
    })

  Note that that any number other than 0, the boolean true, and any string
  tells Mongo to return that field. 0, null, and false tell Mongo to exclude a
  field and return the others. The _id field must be explicitly excluded this
  way, otherwise it will always be returned.

Here are some CRUD methods:

use db // creates database with name db if it doesn't already exist

CReate:

  db.collection.insertOne() // Inserts a single document into a collection;
  // creates the collection if it doesn't exist

    You may insert a document into a collection with any parameters
    whatsoever. Unlike in SQL, NoSQL platforms such as MongoDB don't require
    that you follow any pre-established schema or format. There will be no
    empty columns, or columns with default values, unless explicitly specified.

    So if we were to enter:

      db.orwell.insertOne({
          "title": "Homage to Catalonia",
          "year": 1938,
          "year published in US": 1952,
          "read": false
      })

    Followed by:

      db.orwell.insertOne({
          "title": "1984",
          "year": 1949,
          "read": true
      })

    The latter document would not have an empty "year published in US"
    property like it would if we were using a predefined schema with an SQL
    platform.

  The only exception to this rule is with the _id field. By default, this
  field will be a unique hexadecimal string. You may specify _id manually, but
  the insertion will throw an error if the string you enter is not unique.

  db.collection.insertMany() // Inserts several documents into a collection

    This looks like an array of JSON objects, like this:

    db.orwell.insertMany([{
      "title": "Burmese Days",
      "year": 1934
    }, {
      "title": "The Road to Wigan Pier",
      "year": 1937
    }])

    The rules for inserting a single document apply the same way here.

Update:

  db.collection.updateOne() // update a single document

    This method can take up to three arguments, but requires only one. They
    are filter, update, and options. The update argument is the only one
    that's required. Without a filter argument, the first document returned is
    updated.

    Recall that in a previous example, we marked Homage to Catalonia as not
    read. If we read that book and want our database to reflect that, this is
    what the command looks like:

      db.orwell.updateOne({
        "title": "Homage to Catalonia"
      }, {
        $set: {
          "read": true
        }
      })

    Notice the property that begins with $. This is the update operator, which
    tells Mongo which type of update to perform. The update operators are:

      $currentDate // Sets the value of a field to the current date. Useful
      // for manually updating Date or Timestamp fields.

      $inc // Increments the value of a numeric field be the amount you
      // specify.

      $min // Only updates a numeric field if the value you specify is less than the
      // existing value of that field.

      $max // Only updates a numeric field if the value you specify is greater than
      // the existing value of that field.
      
      $mul // Multiplies a numeric field by the amount you specify

      $rename // Renames a field; does not change its value.

      $set // Sets the value of a field in a document. Probably the most
      // commonly used update operator.

      $setOnInsert // Sets the value of a field if a new document is inserted.

      $unset // Removes a field from a document.

    There are also update operators for use on arrays. They are:

      $ // Updates the first element matching a query condition.

      $[] // Updates all elements that match the query condition.

      $[<identifier>] // Updates all elements that match the arrayFilers
      // condition in the documents matching the query condition.

      $addToSet // Adds elements to an array if they do not exist in that set.

      $pop // Removes the first or last item of an array.

      $pull // Removes all array elements matching the specified query.

      $pullAll // Removes all matching values from an array

      $push // Add an item to an array regardless of whether it exists.

      These array operators can be modified with the following:

        $each // Makes $push or $addToSet append multiple items

        $position // Specifies an array index to add elements when using $push

        $slice // Limits size of updated arrays when using $push

        $sort // $push reorders documents stored in an array

    Finally, there is the bitwise operator for performing AND, OR, XOR updates
    of integer values. To be clear, in any kind of programming or mathematics,
    AND means both values are true, OR means one or the other value is true,
    and XOR means one value is true and the other is false.

  db.collection.updateMany() // update several documents

  db.collection.replaceOne() // removes and replaces a single document;
  without parameters, this is the first document returned

Delete:

  db.collection.deleteOne() // deletes a single document; without parameters,
  this is the first document returned

  db.collection.deleteMany() // deletes several documents
